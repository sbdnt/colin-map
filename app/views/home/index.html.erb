    <style>
      
      #map-container {
        height: auto;
        width: 100%;
        border-radius: 16px 16px;
        border-color: #fff;
        border-style: solid;
        box-shadow: 2px 2px 10px #B1B1B1;
        margin-top: 25px;
        border-width: 7px;
      }
      #map-canvas {
        height: 484px;
        width: 100%;
      }

      /* Bootstrap Css Map Fix*/
      #map-container #map-canvas img {
        max-width: none;
      }
      
      /* Bootstrap Css Map Fix*/
      #map-container #map-canvas label {
        width: auto; display:inline;
      }
      
      .controls {
        margin-top: 16px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #input_claim {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #input_claim:focus {
        border-color: #4d90fe;
      }

      #input_location {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #input_location:focus {
        border-color: #4d90fe;
      }

      #pac_input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac_input:focus {
        border-color: #4d90fe;
      }

      .pac-container {
        font-family: Roboto;
      }

      #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

    </style>

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>
    <script>
      
      var map;
      var markers = [];
      var home_img_url = "<%= asset_url('home12.png')%>";
      var human_img_url = "<%= asset_url('neighbor1.png')%>";
      var location_img_url = "<%= asset_url('location3.png')%>";
      google.maps.event.addDomListener(window, 'load', initialize);

      function initialize() 
      {
        
        var mapOptions = {
        center: new google.maps.LatLng(40.7127837, -74.00594130000002),
        zoom: 4
        };
        map = new google.maps.Map(document.getElementById('map-canvas'),
        mapOptions);
        var geocoder = new google.maps.Geocoder();
        var location = "USA";
        geocoder.geocode( { 'address': location }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
            } else {
                alert("Could not find location: " + location);
            }
        });
        
        /////////////////////////////////////////////////////////////////////
        var input = /** @type {HTMLInputElement} */(
          document.getElementById('pac_input'));

        var input_claim = /** @type {HTMLInputElement} */(
          document.getElementById('input_claim'));

        var input_location = /** @type {HTMLInputElement} */(
          document.getElementById('input_location'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
        
        ////////////////////////////////////////////////////////////////////////////
        <%if !user_signed_in?%>
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(pac_input);
          var autocomplete = new google.maps.places.Autocomplete(pac_input);
          autocomplete.bindTo('bounds', map);
          // Add event for field claim house
          google.maps.event.addListener(autocomplete, 'place_changed', function(){
            deleteMarkers();
            $('#input_location').val('');

            var place = autocomplete.getPlace();
            if (!place.geometry) {
              window.alert("Autocomplete's returned place contains no geometry");
              return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) 
            {
              // map.fitBounds(place.geometry.viewport);
              map.setCenter(place.geometry.location);
              map.setZoom(13);  // Why 17? Because it looks good.
            } 
            else 
            {
              map.setCenter(place.geometry.location);
              map.setZoom(13);  // Why 17? Because it looks good.
            }
            
            var address = '';
            if (place.address_components) {
              address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
              ].join(' ');
            }

            marker = createMarker(place.geometry.location, map, address);
            infowindow = createInfoWindow(map, marker, address);
            infowindow.open(map, marker); 
          });

        <%end%>

        <%if user_signed_in? && current_user.claimeds.blank?%>
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_claim);
          var autocomplete_claim = new google.maps.places.Autocomplete(input_claim);
          autocomplete_claim.bindTo('bounds', map);
          // Add event for field claim house
          google.maps.event.addListener(autocomplete_claim, 'place_changed', function(){
            deleteMarkers();
            $('#input_location').val('');

            var place = autocomplete_claim.getPlace();
            if (!place.geometry) {
              window.alert("Autocomplete's returned place contains no geometry");
              return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) 
            {
              // map.fitBounds(place.geometry.viewport);
              map.setCenter(place.geometry.location);
              map.setZoom(17);  // Why 17? Because it looks good.
            } 
            else 
            {
              map.setCenter(place.geometry.location);
              map.setZoom(17);  // Why 17? Because it looks good.
            }
            
            var address = '';
            if (place.address_components) {
              address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
              ].join(' ');
            }

            marker = createCustomMarker(place.geometry.location,map,address, home_img_url);
            infowindow = createInfoWindow(map, marker, address);
            infowindow.open(map, marker);          
            google.maps.event.addListener(marker, 'click', function(e) {
              var latitude = (e.latLng.lat());
              var longitude = (e.latLng.lng());
              claim_address(latitude, longitude);
            });
          });
        <%end%>

        //////////////////////////////////////////////////////////////////////////
        <%if user_signed_in? && current_user.claimeds.present?%>
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_location);
          var autocomplete_location = new google.maps.places.Autocomplete(input_location);
          autocomplete_location.bindTo('bounds', map);
          
          // Add event for field find neighborhood follow location
          google.maps.event.addListener(autocomplete_location, 'place_changed', function() 
          {
            deleteMarkers();
            $('#input_claim').val('');
            var place = autocomplete_location.getPlace();
            if (!place.geometry) {
              window.alert("Autocomplete's returned place contains no geometry");
              return;
            }
            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) 
            {
              map.fitBounds(place.geometry.viewport);
            } 
            else 
            {
              map.setCenter(place.geometry.location);
              map.setZoom(17);  // Why 17? Because it looks good.
            }
            
            var address = '';
            if (place.address_components) {
              address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
              ].join(' ');
            }
            
            // get location infor 
            if (place.geometry) {
              location = place.geometry.location;
              // alert(place.geometry.location);
              // alert(location.lat());
              jQuery.ajax({
                url: 'claimeds',
                data: "latitude=" + location.lat() + "&longitude=" + location.lng() + "&find_claimed=1",
                type: "POST",
                success: function(data) {
                  // alert(data);
                  locations = JSON.parse(data);
                  if (locations.length > 0)
                  {
                    // alert("Found " + (locations.length) + " claimed house" + " !");
                  }
                  else
                  {
                    alert("Not found any claimed house !");
                    map.setCenter(location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                    var marker = createCustomMarker(location,map,"",location_img_url);
                    var infowindow = new google.maps.InfoWindow();
                    bindInfoWindow(marker, map, infowindow, address, "");  
                    return;
                  }
                  // Create marker
                  map.setCenter(location);
                  map.setZoom(17);  // Why 17? Because it looks good.
                  
                  var marker = createCustomMarker(location,map,"",location_img_url);
                  var infowindow = new google.maps.InfoWindow();
                  bindInfoWindow(marker, map, infowindow, address, "");
                  for (i = 0; i < locations.length; i++) {
                    location = new google.maps.LatLng(locations[i][1], locations[i][2]);
                    var marker = createCustomMarker(location,map,"",human_img_url);
                    var content = "<strong>Email:</strong> " + locations[i][3] + "<br/>" + "<strong>Address:</strong> " + locations[i][0] 
                    var infowindow = new google.maps.InfoWindow();
                    bindInfoWindow(marker, map, infowindow, content, locations[i][3]);  
                  }
                  },
                  failure: function() {for (i = 0; i < locations.length; i++)
                    alert("Some things went wrong !");
                  }
              }); 
            }
          });
        
          /////////////////////////////////////////////////////////////////////////////
          var button = document.getElementById("find_neig");
          // add onclick event 
          button.onclick = function() { 
            deleteMarkers();
            $('#input_claim').val('');
            $('#input_location').val('');
            jQuery.ajax({
              url: 'claimeds',
              data: "find_neighbors=1",
              type: "POST",
              success: function(data) {
                <%-
                  address = current_user.claimeds.first.try(:address)
                -%>
                var address = "<%=address%>"
                locations = JSON.parse(data);
                if (locations.length > 1)
                {
                  // alert("Found " + (locations.length -1) + " neighbors" + " !");
                }
                else
                {
                  alert("Not found neighbors !");
                  house = locations[0];
                  location = new google.maps.LatLng(house[1], house[2]);
                  map.setCenter(location);
                  map.setZoom(17);  // Why 17? Because it looks good.
                  var marker = createCustomMarker(location,map,"",home_img_url);
                  var infowindow = new google.maps.InfoWindow();
                  bindInfoWindow(marker, map, infowindow, address, "");

                  return;
                }
                // alert(locations);
                // Create marker
                house = locations[0];
                location = new google.maps.LatLng(house[1], house[2]);
                map.setCenter(location);
                map.setZoom(17);  // Why 17? Because it looks good.
                var marker = createCustomMarker(location,map,"",home_img_url);
                var infowindow = new google.maps.InfoWindow();
                bindInfoWindow(marker, map, infowindow, address, "");
                for (i = 1; i < locations.length; i++) {
                  location = new google.maps.LatLng(locations[i][1], locations[i][2]);
                  var marker = createCustomMarker(location,map,"",human_img_url);
                  var content = "<strong>Email:</strong> " + locations[i][3] + "<br/>" + "<strong>Address:</strong> " + locations[i][0] 
                  var infowindow = new google.maps.InfoWindow();
                  bindInfoWindow(marker, map, infowindow, content, locations[i][3]);
                }
              },
              failure: function() {
                alert("Some things went wrong !");
              }
            });
          }
        <%end%>

      }  

      function bindInfoWindow(marker, map, infowindow, description, mail_to) {
        google.maps.event.addListener(marker, 'mouseover', function() {
            infowindow.setContent(description);
            infowindow.open(map, marker);
        });
        google.maps.event.addListener(marker, 'mouseout', function() {
          infowindow.close();
        });
        google.maps.event.addListener(marker, 'click', function() {
          window.location.href = "mailto:" + mail_to + "?subject=Subject&body=Message to...";
        });
      }
         
      function claim_address(latitude, longitude)
      {
        if (!confirm("Are you sure this is your house ?")) {
          return;                  
        }
        jQuery.ajax({
          url: 'claimeds',
          data: "latitude=" + latitude + "&longitude=" + longitude + "&claim_house=1",
          type: "POST",
          success: function(data) {
            data = JSON.parse(data)
            alert(data[1]);
            if (data[0] == 0)
            {
              location.reload();
            }
          },
          failure: function() {
            alert("Some things went wrong !");
          }
        }); 
      }

      function create_neighbors_marker(map, neighbors) {
        var image = {
          url: 'images/house.png',
          // This marker is 20 pixels wide by 32 pixels tall.
          size: new google.maps.Size(20, 32),
          // The origin for this image is 0,0.
          origin: new google.maps.Point(0,0),
          // The anchor for this image is the base of the flagpole at 0,32.
          anchor: new google.maps.Point(0, 32)
        };
        var shape = {
            coords: [1, 1, 1, 20, 18, 20, 18 , 1],
            type: 'poly'
        };
        for (var i = 0; i < neighbors.length; i++) 
        {
          var neighbor = neighbors[i];
          var myLatLng = new google.maps.LatLng(neighbor[1], neighbor[2]);
          
          var infowindow = new google.maps.InfoWindow();
          infowindow.setContent(neighbor[0]);
          
          var marker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            // icon: image,
            // shape: shape,
            title: neighbor[0]
          });
          markers.push(marker);
          google.maps.event.addListener(marker, 'click', function(e) {
            alert("Sent email to:" + neighbor[0]);
          });

        }
      }

      function createMarker(coords, map, title){
        marker = new google.maps.Marker({
          position: coords,
          map: map,
          title: title
        });
        markers.push(marker);
        return marker;
      }

      // Sets the map on all markers in the array.
      function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
        setAllMap(null);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
        clearMarkers();
        markers = [];
      }

      function createImage(url){
        var image = {
          url: url,
          size: new google.maps.Size(75, 75),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(32, 32)
        };
        return image;
      }

      function createCustomMarker(coords,map,title,image_path){
        marker = new google.maps.Marker({
          position: coords,
          map: map,
          title: title,
          icon: image_path
        });
        markers.push(marker);
        return marker;
      }

      function createInfoWindow(map, marker, text){
        var infowindow = new google.maps.InfoWindow({
          content: text
        });
        return infowindow;
      }

    </script>
    <%if user_signed_in? && current_user.claimeds.blank?%>
      <input id="input_claim" class="controls" type="text" placeholder="Claim your house..">
    <%end%>
    
    <%if user_signed_in? && current_user.claimeds.present?%>
      <input id="input_location" class="controls" type="text" placeholder="Find claimed houses..">
    <%end%>
    <%if !user_signed_in?%>
      <input id="pac_input" class="controls" type="text" placeholder="Find and claim your residence..">
    <%end%>
    <div id="map-container">
      <div id="map-canvas"></div>
    </div>
    

